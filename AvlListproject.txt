# # username - andalrhmana
# id1      - 322923087
# name1    - andalrhmana
# id2      - daadusch
# name2    - 212001192


"""A class represnting a node in an AVL tree"""


class AVLNode(object):
    """Constructor, you are allowed to add more fields.

    @type value: str
    @param value: data of your node
    """

    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        self.parent = None
        self.height = -1
        self.size = 0
        self.prevheight = -1

    """returns the left child
    @rtype: AVLNode
    @returns: the left child of self, None if there is no left child
    """
    """TIME COMPLEXITY: O(1)"""
    def getLeft(self):
        if self == None:
            return None
        return self.left

    """returns the right child

    @rtype: AVLNode
    @returns: the right child of self, None if there is no right child
    """
    """TIME COMPLEXITY: O(1)"""
    def getRight(self):
        if self == None:
            return None
        return self.right

    """returns the parent 

    @rtype: AVLNode
    @returns: the parent of self, None if there is no parent
    """
    """TIME COMPLEXITY: O(1)"""
    def getParent(self):
        if self == None:
            return None
        return self.parent

    """return the value

    @rtype: str
    @returns: the value of self, None if the node is virtual
    """
    """TIME COMPLEXITY: O(1)"""
    def getValue(self):
        if self == None:
            return None
        return self.value

    """returns the height

    @rtype: int
    @returns: the height of self, -1 if the node is virtual
    """
    """TIME COMPLEXITY: O(1)"""
    def getHeight(self):
        if self == None:
            return -1
        return self.height

    """returns the size

        @rtype: int
        @returns: the  of self, 0 if the node is virtual
        """
    """TIME COMPLEXITY: O(1)"""
    def getSize(self):
        if self == None:
            return 0
        return self.size

    """returns the previous height

        @rtype: int
        @returns: the  of self, -1 if the node is virtual
        """
    """TIME COMPLEXITY: O(1)"""
    def getPrevHeight(self):
        if self == None:
            return -1
        return self.prevheight

    """sets left child

    @type node: AVLNode
    @param node: a node
    """
    """TIME COMPLEXITY: O(1)"""
    def setLeft(self, node):
        if self != None:
            self.left = node

    """sets right child

    @type node: AVLNode
    @param node: a node
    """
    """TIME COMPLEXITY: O(1)"""
    def setRight(self, node):
        if self != None:
            self.right = node

    """sets parent

    @type node: AVLNode
    @param node: a node
    """
    """TIME COMPLEXITY: O(1)"""
    def setParent(self, node):
        if self != None:
            self.parent = node

    """sets value

    @type value: str
    @param value: data
    """
    """TIME COMPLEXITY: O(1)"""
    def setValue(self, value):
        self.value = value

    """sets the balance factor of the node

    @type h: int
    @param h: the height
    """
    """TIME COMPLEXITY: O(1)"""
    def setHeight(self, h):
        if self.height != -1:
            self.prevheight = self.height
            self.height = h
        else:
            self.prevheight = h
            self.height = h


    """sets the size of the node

    @type s: int\
    @param s: the size
    """
    """TIME COMPLEXITY: O(1)"""
    def setSize(self, s):
        self.size = s


    """returns whether self is not a virtual node 

    @rtype: bool
    @returns: False if self is a virtual node, True otherwise.
    """
    """TIME COMPLEXITY: O(1)"""
    def isRealNode(self):
        if self == None:
            return False
        return self.height != -1


"""
A class implementing the ADT list, using an AVL tree.
"""


class AVLTreeList(object):
    """
    Constructor, you are allowed to add more fields.

    """

    def __init__(self):
        self.root = None
        # add your fields here

    """returns whether the list is empty

    @rtype: bool
    @returns: True if the list is empty, False otherwise
    """
    """TIME COMPLEXITY: O(1)"""
    def empty(self):
        return self.root == None #O(1)

    """retrieves the node of the i'th item in the list

    @type i: int
    @pre: 1 <= i <= self.length()
    @param i: index in the list
    @rtype: str
    @returns: the the node of the i'th item in the AVL-BST
    """
    """TIME COMPLEXITY: O(log(n))"""
    def Tree_select(self, i):
        return AVLTreeList.Tree_select_rec(self.root, i)

    def Tree_select_rec(root, i):
        z = AVLNode.getSize(AVLNode.getLeft(root)) + 1                       #O(1)
        if i == z:
            return root
        elif i < z:
            return AVLTreeList.Tree_select_rec(AVLNode.getLeft(root), i)
        else:
            return AVLTreeList.Tree_select_rec(AVLNode.getRight(root), i - z)

    """retrieves the value of the i'th item in the list

    @type i: int
    @pre: 0 <= i < self.length()
    @param i: index in the list
    @rtype: str
    @returns: the the value of the i'th item in the list
    """

    def retrieve(self, i):
        return AVLNode.getValue(AVLTreeList.Tree_select(self, i+1))

    """retrieves the node of the 1'th item in the list of the node@self.root = node 

    @returns: the the node of the 1'th item in the list
    """

    def MinAvl(node):
        if node != None:
            return AVLTreeList.Tree_select_rec(node, 1)

    """return the successor of the node in the list 

    @returns: the successor of the node in the list
    """

    def successor(node):
        if AVLNode.isRealNode(AVLNode.getRight(node)):
            return AVLTreeList.MinAvl(AVLNode.getRight(node))
        y = AVLNode.getParent(node)
        while y != None and node == AVLNode.getRight(y):
            node = y
            y = AVLNode.getParent(node)
        return y

    """retrieves the node of the lasr item in the list of the node@self.root = node 

    @returns: the the node of the last item in the list
    """

    def MaxAvl(node):
        if node != None:
            return AVLTreeList.Tree_select_rec(node, AVLNode.getSize(node))

    """return the predecessor of the node in the list 

    @returns: the predecessor of the node in the list
    """

    def predecessor(node):
        if AVLNode.isRealNode(AVLNode.getLeft(node)):
            return AVLTreeList.MaxAvl(AVLNode.getLeft(node))
        y = AVLNode.getParent(node)
        while y != None and node == AVLNode.getLeft(y):
            node = y
            y = AVLNode.getParent(node)
        return y

    """
    Set the height and size from the node to root of in the list
    """

    def setSizeandHeight(node):
        while node != None:
            AVLNode.setSize(node, AVLNode.getSize(AVLNode.getRight(node)) + AVLNode.getSize(AVLNode.getLeft(node)) + 1)
            AVLNode.setHeight(node, max(AVLNode.getHeight(AVLNode.getLeft(node)), AVLNode.getHeight(AVLNode.getRight(node))) + 1)
            node = AVLNode.getParent(node)

    """
    Set the height from the node to root of in the list
    """

    def setheightRotation(node):
        counter = 0
        while node != None:
            AVLNode.setHeight(node, max(AVLNode.getHeight(AVLNode.getLeft(node)), AVLNode.getHeight(AVLNode.getRight(node))) + 1)
            if AVLNode.getHeight(node) != AVLNode.getPrevHeight(node):
                counter += 1
            node = AVLNode.getParent(node)
        return counter

    def balanceFactor(node):
        return AVLNode.getHeight(AVLNode.getLeft(node)) - AVLNode.getHeight(AVLNode.getRight(node))

    """
    balance the tree - left left rotaion
    """
    """TIME COMLEXITY: O(1)"""
    def RotationLL(B):
        A = AVLNode.getLeft(B) #O(1)
        AVLNode.setLeft(B, AVLNode.getRight(A)) #O(1)
        AVLNode.setParent(AVLNode.getLeft(B), B) #O(1)
        AVLNode.setRight(A, B) #O(1)
        AVLNode.setParent(A, AVLNode.getParent(B)) #O(1)
        if AVLNode.getParent(B) != None: #O(1)
            if AVLNode.getLeft(AVLNode.getParent(B)) == B: #O(1)
                AVLNode.setLeft(AVLNode.getParent(B), A) #O(1)
            else:
                AVLNode.setRight(AVLNode.getParent(B), A) #O(1)
        AVLNode.setParent(B, A) #O(1)
        AVLNode.setSize(B, AVLNode.getSize(AVLNode.getLeft(B)) + AVLNode.getSize(AVLNode.getRight(B)) + 1) #O(1)
        AVLNode.setSize(A, AVLNode.getSize(AVLNode.getLeft(A)) + AVLNode.getSize(AVLNode.getRight(A)) + 1) #O(1)
        AVLNode.setHeight(B, max(AVLNode.getHeight(AVLNode.getLeft(B)), AVLNode.getHeight(AVLNode.getRight(B))) + 1) #O(1)
        AVLNode.setHeight(A, max(AVLNode.getHeight(AVLNode.getLeft(A)), AVLNode.getHeight(AVLNode.getRight(A))) + 1) #O(1)

    """
    balance the tree - right right rotaion
    """
    """TIME COMLEXITY: O(1)"""
    def RotationRR(B):
        A = AVLNode.getRight(B) #O(1)
        AVLNode.setRight(B, AVLNode.getLeft(A)) #O(1)
        AVLNode.setParent(AVLNode.getRight(B), B) #O(1)
        AVLNode.setLeft(A, B) #O(1)
        AVLNode.setParent(A, AVLNode.getParent(B)) #O(1)
        if AVLNode.getParent(B) != None: #O(1)
            if AVLNode.getRight(AVLNode.getParent(B)) == B: #O(1)
                AVLNode.setRight(AVLNode.getParent(B), A) #O(1)
            else:
                AVLNode.setLeft(AVLNode.getParent(B), A) #O(1)

        AVLNode.setParent(B, A) #O(1)
        AVLNode.setSize(B, AVLNode.getSize(AVLNode.getLeft(B)) + AVLNode.getSize(AVLNode.getRight(B)) + 1) #O(1)
        AVLNode.setSize(A, AVLNode.getSize(AVLNode.getLeft(A)) + AVLNode.getSize(AVLNode.getRight(A)) + 1) #O(1)
        AVLNode.setHeight(B, max(AVLNode.getHeight(AVLNode.getLeft(B)), AVLNode.getHeight(AVLNode.getRight(B))) + 1) #O(1)
        AVLNode.setHeight(A, max(AVLNode.getHeight(AVLNode.getLeft(A)), AVLNode.getHeight(AVLNode.getRight(A))) + 1)    #O(1)

    """
    balance the tree - left right rotaion
    """
    """TIME COMLEXITY: O(1)"""
    def RotationLR(C):
        B = AVLNode.getRight(AVLNode.getLeft(C)) #O(1)
        A = AVLNode.getLeft(C) #O(1)
        AVLNode.setLeft(C, AVLNode.getRight(B)) #O(1)
        AVLNode.setParent(AVLNode.getLeft(C), C) #O(1)
        AVLNode.setRight(A, AVLNode.getLeft(B)) #O(1)
        AVLNode.setParent(AVLNode.getRight(A), A) #O(1)
        AVLNode.setRight(B, C) #O(1)
        AVLNode.setParent(B, AVLNode.getParent(C)) #O(1)
        if AVLNode.getParent(C) != None: #O(1)
            if AVLNode.getRight(AVLNode.getParent(C)) == C: #O(1)
                AVLNode.setRight(AVLNode.getParent(C), B) #O(1)
            else:
                AVLNode.setLeft(AVLNode.getParent(C), B) #O(1)
        AVLNode.setParent(C, B) #O(1)
        AVLNode.setLeft(B, A) #O(1)
        AVLNode.setParent(A, B) #O(1)
        AVLNode.setSize(C, AVLNode.getSize(AVLNode.getLeft(C)) + AVLNode.getSize(AVLNode.getRight(C)) + 1) #O(1)
        AVLNode.setSize(A, AVLNode.getSize(AVLNode.getLeft(A)) + AVLNode.getSize(AVLNode.getRight(A)) + 1) #O(1)
        AVLNode.setSize(B, AVLNode.getSize(AVLNode.getLeft(B)) + AVLNode.getSize(AVLNode.getRight(B)) + 1) #O(1)
        AVLNode.setHeight(C, max(AVLNode.getHeight(AVLNode.getLeft(C)), AVLNode.getHeight(AVLNode.getRight(C))) + 1) #O(1)
        AVLNode.setHeight(A, max(AVLNode.getHeight(AVLNode.getLeft(A)), AVLNode.getHeight(AVLNode.getRight(A))) + 1) #O(1)
        AVLNode.setHeight(B, max(AVLNode.getHeight(AVLNode.getLeft(B)), AVLNode.getHeight(AVLNode.getRight(B))) + 1) #O(1)

    """
    balance the tree - right left rotaion
    """
    """TIME COMLEXITY: O(1)"""
    def RotationRL(C):
        B = AVLNode.getLeft(AVLNode.getRight(C)) #O(1)
        A = AVLNode.getRight(C) #O(1)
        AVLNode.setRight(C, AVLNode.getLeft(B)) #O(1)
        AVLNode.setParent(AVLNode.getRight(C), C) #O(1)
        AVLNode.setLeft(A, AVLNode.getRight(B)) #O(1)
        AVLNode.setParent(AVLNode.getLeft(A), A) #O(1)
        AVLNode.setLeft(B, C) #O(1)
        AVLNode.setParent(B, AVLNode.getParent(C)) #O(1)
        if AVLNode.getParent(C) != None: #O(1)
            if AVLNode.getLeft(AVLNode.getParent(C)) == C:  #O(1)
                AVLNode.setLeft(AVLNode.getParent(C), B) #O(1)
            else:
                AVLNode.setRight(AVLNode.getParent(C), B) #O(1)
        AVLNode.setParent(C, B) #O(1)
        AVLNode.setRight(B, A) #O(1)
        AVLNode.setParent(A, B) #O(1)
        AVLNode.setSize(C, AVLNode.getSize(AVLNode.getLeft(C)) + AVLNode.getSize(AVLNode.getRight(C)) + 1) #O(1)
        AVLNode.setSize(A, AVLNode.getSize(AVLNode.getLeft(A)) + AVLNode.getSize(AVLNode.getRight(A)) + 1) #O(1)
        AVLNode.setSize(B, AVLNode.getSize(AVLNode.getLeft(B)) + AVLNode.getSize(AVLNode.getRight(B)) + 1) #O(1)
        AVLNode.setHeight(C, max(AVLNode.getHeight(AVLNode.getLeft(C)), AVLNode.getHeight(AVLNode.getRight(C))) + 1) #O(1)
        AVLNode.setHeight(A, max(AVLNode.getHeight(AVLNode.getLeft(A)), AVLNode.getHeight(AVLNode.getRight(A))) + 1) #O(1)
        AVLNode.setHeight(B, max(AVLNode.getHeight(AVLNode.getLeft(B)), AVLNode.getHeight(AVLNode.getRight(B))) + 1) #O(1)


    """inserts val at position i in the list
    @type i: int
    @pre: 0 <= i <= self.length()
    @param i: The intended index in the list to which we insert val
    @type val: str
    @param val: the value we inserts
    @rtype: list
    @returns: parent of the inserted value
    """
    def insert_BST(self, i , val):
        newnode = AVLNode(val)
        AVLNode.setHeight(newnode, 0)
        AVLNode.setSize(newnode, 1)
        AVLNode.setRight(newnode, AVLNode(None))
        AVLNode.setParent(AVLNode.getRight(newnode), newnode)
        AVLNode.setLeft(newnode, AVLNode(None))
        AVLNode.setParent(AVLNode.getLeft(newnode), newnode)
        if i < AVLNode.getSize(self.root):
            current = AVLTreeList.Tree_select(self, i + 1)
            if not AVLNode.isRealNode(AVLNode.getLeft(current)):
                AVLNode.setLeft(current, newnode)
                AVLNode.setParent(newnode, current)
            else:
                predecessor = AVLTreeList.predecessor(current)
                AVLNode.setRight(predecessor, newnode)
                AVLNode.setParent(newnode, predecessor)
        else:
            maxnode = AVLTreeList.MaxAvl(self.root)
            if maxnode != None:
                AVLNode.setRight(maxnode, newnode)
                AVLNode.setParent(newnode, maxnode)
            else:
                self.root = newnode
        AVLTreeList.setSizeandHeight(newnode)
        dad = AVLNode.getParent(newnode)
        return dad

    """inserts val at position i in the list

    @type i: int
    @pre: 0 <= i <= self.length()
    @param i: The intended index in the list to which we insert val
    @type val: str
    @param val: the value we inserts
    @rtype: list
    @returns: the number of rebalancing operation due to AVL rebalancing
    """
    """TIME COMLEXITY: O(log(n))"""
    def insert(self, i, val):
        dad = AVLTreeList.insert_BST(self, i , val) #O(log(n))
        count = 0 #O(1)
        #balance the tree:
        while dad != None: #the number of iterations at most is the height of the tree ( log(n) at the worst case)
            BFdad = AVLTreeList.balanceFactor(dad) #O(1)
            if -1 <= BFdad <= 1:
                if AVLNode.getHeight(dad) == AVLNode.getPrevHeight(dad): #O(1)
                    break
                count += 1 #O(1)
                dad = AVLNode.getParent(dad) #O(1)
            else:
                if BFdad == 2: #O(1)
                    BFleftson = AVLTreeList.balanceFactor(AVLNode.getLeft(dad)) #O(1)
                    if BFleftson == 1:
                        AVLTreeList.RotationLL(dad) #O(1)
                        count += 1 #O(1)
                    else:
                        AVLTreeList.RotationLR(dad) #O(1)
                        count += 2 #O(1)
                else:
                    BFrightson = AVLTreeList.balanceFactor(AVLNode.getRight(dad)) #O(1)
                    if BFrightson == 1:
                        AVLTreeList.RotationRL(dad) #O(1)
                        count += 2 #O(1)
                    else:
                        AVLTreeList.RotationRR(dad) #O(1)
                        count += 1
                if dad == self.root:
                    self.root = AVLNode.getParent(dad) #O(1)
                dad = AVLNode.getParent(dad) #O(1)
                count += AVLTreeList.setheightRotation(dad) #O(1)
                break

        return count #O(1)

    """deletes the i'th item in the list

    @type i: int
    @pre: 0 <= i < self.length()
    @param i: The intended index in the list to be deleted
    @rtype: int
    @returns: parent of the successor of the element in i index
    """
    def BST_delete(self, i):
        pop = AVLTreeList.Tree_select(self, i + 1)
        if (not AVLNode.isRealNode(AVLNode.getLeft(pop))) and (not AVLNode.isRealNode(AVLNode.getRight(pop))):
            if AVLNode.getParent(pop) == None:
                self.root = None
                return 0
            elif AVLNode.getRight(AVLNode.getParent(pop)) == pop:
                dad = AVLNode.getParent(pop)
                AVLNode.setRight(AVLNode.getParent(pop), AVLNode(None))
                AVLNode.setParent(AVLNode.getRight(AVLNode.getParent(pop)), AVLNode.getParent(pop))
            else:
                dad = AVLNode.getParent(pop)
                AVLNode.setLeft(AVLNode.getParent(pop), AVLNode(None))
                AVLNode.setParent(AVLNode.getLeft(AVLNode.getParent(pop)), AVLNode.getParent(pop))
        elif not AVLNode.isRealNode(AVLNode.getLeft(pop)):
            dad = AVLNode.getParent(pop)
            if dad == None:
                self.root = AVLNode.getRight(pop)
                AVLNode.getParent(self.root, None)
            elif AVLNode.getRight(dad) == pop:
                AVLNode.setRight(dad, AVLNode.getRight(pop))
                AVLNode.setParent(AVLNode.getRight(dad), dad)
            else:
                AVLNode.setLeft(dad, AVLNode.getRight(pop))
                AVLNode.setParent(AVLNode.getLeft(dad), dad)
        elif not AVLNode.isRealNode(AVLNode.getRight(pop)):
            dad = AVLNode.getParent(pop)
            if dad == None:
                self.root = AVLNode.getLeft(pop)
                AVLNode.setParent(self.root, None)
            elif AVLNode.getRight(dad) == pop:
                AVLNode.setRight(dad, AVLNode.getLeft(pop))
                AVLNode.setParent(AVLNode.getRight(dad), dad)
            else:
                AVLNode.setLeft(dad, AVLNode.getLeft(pop))
                AVLNode.setParent(AVLNode.getLeft(dad), dad)
        else:
            SuccessorOfPop = AVLTreeList.successor(pop)
            dad = AVLNode.getParent(SuccessorOfPop)
            if dad != pop:
                AVLNode.setLeft(dad, AVLNode.getRight(SuccessorOfPop))
                AVLNode.setParent(AVLNode.getRight(SuccessorOfPop), dad)
                AVLNode.setRight(SuccessorOfPop, AVLNode.getRight(pop))
                AVLNode.setParent(AVLNode.getRight(SuccessorOfPop), SuccessorOfPop)
            AVLNode.setLeft(SuccessorOfPop, AVLNode.getLeft(pop))
            AVLNode.setParent(AVLNode.getLeft(pop), SuccessorOfPop)

            if pop == self.root:
                self.root = SuccessorOfPop
                AVLNode.setParent(SuccessorOfPop, None)
            else:
                anccestor = AVLNode.getParent(pop)
                if AVLNode.getRight(anccestor) == pop:
                    AVLNode.setRight(anccestor, SuccessorOfPop)
                else:
                    AVLNode.setLeft(anccestor, SuccessorOfPop)
                AVLNode.setParent(SuccessorOfPop, anccestor)
            if dad == pop:
                dad = SuccessorOfPop
        AVLTreeList.setSizeandHeight(dad)
        return dad

    """deletes the i'th item in the list

    @type i: int
    @pre: 0 <= i < self.length()
    @param i: The intended index in the list to be deleted
    @rtype: int
    @returns: the number of rebalancing operation due to AVL rebalancing
    """
    """TIME COMLEXITY: O(log(n))"""
    def delete(self, i):
        dad = AVLTreeList.BST_delete(self, i) #O(log(n))
        count = 0 #O(1)
        # balance the tree:
        while dad != None: # the number of iterations is the height of the tree (log(n))
            BFdad = AVLTreeList.balanceFactor(dad) #O(1)
            if -1 <= BFdad <= 1: #O(1)
                if AVLNode.getHeight(dad) == AVLNode.getPrevHeight(dad): #O(1)
                    break #find a node that its height didnt changed
                count += 1 #O(1)
                AVLNode.setHeight(dad, max(AVLNode.getHeight(AVLNode.getRight(dad)),
                                           AVLNode.getHeight(AVLNode.getLeft(dad))) + 1) #O(1)
                dad = AVLNode.getParent(dad) #O(1)
            else:
                if BFdad == 2: #O(1)
                    BFleftson = AVLTreeList.balanceFactor(AVLNode.getLeft(dad)) #O(1)
                    if BFleftson == 1 or BFleftson == 0: #O(1)
                        AVLTreeList.RotationLL(dad) #O(1)
                        count += 1 #O(1)
                    else:
                        AVLTreeList.RotationLR(dad) #O(1)
                        count += 2 #O(1)
                else:
                    BFrightson = AVLTreeList.balanceFactor(AVLNode.getRight(dad)) #O(1)
                    if BFrightson == 1: #O(1)
                        AVLTreeList.RotationRL(dad) #O(1)
                        count += 2 #O(1)
                    else:
                        AVLTreeList.RotationRR(dad) #O(1)
                        count += 1 #O(1)
                if dad == self.root: #O(1)
                    self.root = AVLNode.getParent(dad) #O(1)
                dad = AVLNode.getParent(AVLNode.getParent(dad)) #O(1)
        count += AVLTreeList.setheightRotation(dad) #O(1)
        return count #O(1)

    """returns the value of the first item in the list

    @rtype: str
    @returns: the value of the first item, None if the list is empty
    """

    def first(self):
        Min = AVLTreeList.MinAvl(self.root)
        if Min == None:
            return None
        return AVLNode.getValue(Min)

    """returns the value of the last item in the list

    @rtype: str
    @returns: the value of the last item, None if the list is empty
    """

    def last(self):
        Max = AVLTreeList.MaxAvl(self.root)
        if Max == None:
            return None
        return AVLNode.getValue(Max)

    """returns an array representing list 

    @rtype: list
    @returns: a list of strings representing the data structure
    """
    """"TIME COMPLEXITY: O(n)"""
    def listToArray(self):
        listAvl = [] #O(1)
        node = AVLTreeList.MinAvl(self.root) #O(log(n))
        if node == None: #O(1)
            return listAvl #O(1)
        while node != None: #RUN OVER ALL THE LIST (n ITERRATIONS)
            listAvl += [AVLNode.getValue(node)] #O(1)
            node = AVLTreeList.successor(node) #AMORTAIZED TIME: O(1)
        return listAvl #O(1)

    """returns the size of the list 

    @rtype: int
    @returns: the size of the list
    """

    def length(self):
        return AVLNode.getSize(self.root)

    """splits the list at the i'th index

    @type i: int
    @pre: 0 <= i < self.length()
    @param i: The intended index in the list according to whom we split
    @rtype: list
    @returns: a list [left, val, right], where left is an AVLTreeList representing the list until index i-1,
    right is an AVLTreeList representing the list from index i+1, and val is the value at the i'th index.
    """

    def split(self, i):
        x = AVLTreeList.Tree_select(self, i + 1)
        val = AVLNode.getValue(x)
        lefttree = AVLTreeList()
        AVLNode.setParent(AVLNode.getLeft(x), None)
        lefttree.root = AVLNode.getLeft(x)
        righttree = AVLTreeList()
        AVLNode.setParent(AVLNode.getRight(x), None)
        righttree.root = AVLNode.getRight(x)
        dad = AVLNode.getParent(x)
        tree = AVLTreeList()
        while dad != None:
            if AVLNode.getRight(dad) == x:
                AVLNode.setRight(dad, AVLNode(None))
                AVLNode.setParent(AVLNode.getRight(dad), dad)
                x = dad
                dad = AVLNode.getParent(x)
                AVLNode.setParent(x, None)
                tree.root = x
                AVLNode.setSize(x, AVLNode.getSize(AVLNode.getLeft(x)) + 1)
                AVLNode.setHeight(x, AVLNode.getHeight(AVLNode.getLeft(x)) + 1)
                tree.concat(lefttree)
            else:
                AVLNode.setLeft(dad, AVLNode(None))
                AVLNode.setParent(AVLNode.getLeft(dad), dad)
                x = dad
                dad = AVLNode.getParent(x)
                AVLNode.setParent(x, None)
                tree.root = AVLNode.getRight(x)
                AVLNode.setParent(tree.root, None)
                AVLNode.setRight(x, AVLNode(None))
                AVLNode.setParent(AVLNode.getRight(x), x)
                AVLNode.setLeft(x, righttree.root)
                AVLNode.setParent(righttree.root, x)
                righttree.root = x
                AVLNode.setSize(x, AVLNode.getSize(AVLNode.getLeft(x)) + 1)
                AVLNode.setHeight(x, AVLNode.getHeight(AVLNode.getLeft(x)) + 1)
                righttree.concat(tree)
        return [lefttree, val, righttree]

    """concatenates lst to self

    @type lst: AVLTreeList
    @param lst: a list to be concatenated after self
    @rtype: int
    @returns: the absolute value of the difference between the height of the AVL trees joined
    """

    def concat(self, lst):
        if self.root == None:
            self.root = lst.root
            return AVLNode.getHeight(lst.root)
        elif lst.root == None:
            lst.root = self.root
            return AVLNode.getHeight(self.root)
        absouluteHeight = AVLNode.getHeight(self.root) - AVLNode.getHeight(lst.root)
        node = AVLTreeList.MaxAvl(self.root)
        AVLTreeList.delete(self, AVLNode.getSize(self.root) - 1)
        if AVLNode.getHeight(self.root) > AVLNode.getHeight(lst.root):
            nodeself = self.root
            while AVLNode.getHeight(nodeself) > AVLNode.getHeight(lst.root):
                nodeself = AVLNode.getRight(nodeself)
            AVLNode.setParent(node, AVLNode.getParent(nodeself))
            AVLNode.setRight(AVLNode.getParent(node), node)
            AVLNode.setLeft(node, nodeself)
            AVLNode.setParent(nodeself, node)
            AVLNode.setRight(node, lst.root)
            AVLNode.setParent(lst.root, node)
            lst.root = self.root
        elif AVLNode.getHeight(self.root) == AVLNode.getHeight(lst.root):
            AVLNode.setLeft(node, self.root)
            AVLNode.setParent(self.root, node)
            AVLNode.setRight(node, lst.root)
            AVLNode.setParent(lst.root, node)
            AVLNode.setParent(node, None)
            lst.root = node
            self.root = node
        else:
            nodelst = lst.root
            while AVLNode.getHeight(nodelst) > AVLNode.getHeight(self.root):
                nodelst = AVLNode.getLeft(nodelst)
            AVLNode.setParent(node, AVLNode.getParent(nodelst))
            AVLNode.setLeft(AVLNode.getParent(node), node)
            AVLNode.setRight(node, nodelst)
            AVLNode.setParent(nodelst, node)
            AVLNode.setLeft(node, self.root)
            AVLNode.setParent(self.root, node)
            self.root = lst.root
        AVLTreeList.setSizeandHeight(node)
        dad = AVLNode.getParent(node)
        while dad != None:
            BFdad = AVLTreeList.balanceFactor(dad)
            if -1 <= BFdad <= 1:
                if AVLNode.getHeight(dad) == AVLNode.getPrevHeight(dad):
                    break
                AVLNode.setHeight(dad, max(AVLNode.getHeight(AVLNode.getRight(dad)),
                                           AVLNode.getHeight(AVLNode.getLeft(dad))) + 1)
                dad = AVLNode.getParent(dad)
            else:
                if BFdad == 2:
                    BFleftson = AVLTreeList.balanceFactor(AVLNode.getLeft(dad))
                    if BFleftson == 1 or BFleftson == 0:
                        AVLTreeList.RotationLL(dad)
                    else:
                        AVLTreeList.RotationLR(dad)
                else:
                    BFrightson = AVLTreeList.balanceFactor(AVLNode.getRight(dad))
                    if BFrightson == 1:
                        AVLTreeList.RotationRL(dad)
                    else:
                        AVLTreeList.RotationRR(dad)
                if dad == self.root:
                    self.root = AVLNode.getParent(dad)
                    lst.root = self.root
                dad = AVLNode.getParent(AVLNode.getParent(dad))
        AVLTreeList.setheightRotation(dad)
        if absouluteHeight < 0:
            absouluteHeight = -1 * absouluteHeight
        return absouluteHeight

    """searches for a *value* in the list

    @type val: str
    @param val: a value to be searched
    @rtype: int
    @returns: the first index that contains val, -1 if not found.
    """

    def search(self, val):
        count = 0   #O(1)
        node = AVLTreeList.MinAvl(self.root)  #O(1)
        while node != None:  #n iteration in the worst case
            if AVLNode.getValue(node) == val:   #O(1)
                return count  #O(1)
            count += 1  #O(1)
            node = AVLTreeList.successor(node)   #AMORTIZED TIME : O(1)
        return -1  #O(1)

    """returns the root of the tree representing the list

    @rtype: AVLNode
    @returns: the root, None if the list is empty
    """

    def getRoot(self):
        return self.root


    def print2(root, space, count):
        if root == None:
           return
        space += count[0]
        AVLTreeList.print2(AVLNode.getRight(root), space, count)
        print()
        for i in range(count[0], space):
            print(end=" ")
        print(AVLNode.getValue(root))
        AVLTreeList.print2(AVLNode.getLeft(root), space, count)

    def print2d(root):
        AVLTreeList.print2(root, 0, [10])

        ######################################## Put these functions ########################################
        ##################################### inside AVLTreeList class ######################################

    """Checks if the AVL tree properties are consistent

    @rtype: boolean 
    @returns: True if the AVL tree properties are consistent
    """

    def check(self):
        if not self.isAVL():
            print("The tree is not an AVL tree!")
        if not self.isSizeConsistent():
            print("The sizes of the tree nodes are inconsistent!")
        if not self.isHeightConsistent():
            print("The heights of the tree nodes are inconsistent!")
        if not self.isRankConsistent():
            print("The ranks of the tree nodes are inconsistent!")

    """Checks if the tree is an AVL

    @rtype: boolean 
    @returns: True if the tree is an AVL tree
    """

    def isAVL(self):
        return self.isAVLRec(self.getRoot())

    """Checks if the subtree is an AVL
    @type x: AVLNode
    @param x: The root of the subtree
    @rtype: boolean 
    @returns: True if the subtree is an AVL tree
    """

    def isAVLRec(self, x):
        # If x is a virtual node return True
        if not AVLNode.isRealNode(x):
            return True
        # Check abs(balance factor) <= 1
        bf = AVLTreeList.balanceFactor(x)
        if bf > 1 or bf < -1:
            return False
        # Recursive calls
        return self.isAVLRec(x.getLeft()) and self.isAVLRec(x.getRight())

    """Checks if sizes of the nodes in the tree are consistent

    @rtype: boolean 
    @returns: True if sizes of the nodes in the tree are consistent
    """

    def isSizeConsistent(self):
        return self.isSizeConsistentRec(self.getRoot())

    """Checks if sizes of the nodes in the subtree are consistent

    @type x: AVLNode
    @param x: The root of the subtree
    @rtype: boolean 
    @returns: True if sizes of the nodes in the subtree are consistent
    """

    def isSizeConsistentRec(self, x):
        # If x is a virtual node return True
        if not AVLNode.isRealNode(x):
            return True
        # Size of x should be x.left.size + x.right.size + 1
        if x.getSize() != (AVLNode.getSize(x.getLeft()) + AVLNode.getSize(x.getRight()) + 1):
            return False
        # Recursive calls
        return self.isSizeConsistentRec(x.getLeft()) and self.isSizeConsistentRec(x.getRight())

    """Checks if heights of the nodes in the tree are consistent

    @rtype: boolean 
    @returns: True if heights of the nodes in the tree are consistent
    """

    def isHeightConsistent(self):
        return self.isHeightConsistentRec(self.getRoot())

    """Checks if heights of the nodes in the subtree are consistent

    @type x: AVLNode
    @param x: The root of the subtree
    @rtype: boolean 
    @returns: True if heights of the nodes in the subtree are consistent
    """

    def isHeightConsistentRec(self, x):
        # If x is a virtual node return True
        if not AVLNode.isRealNode(x):
            return True
        # Height of x should be maximum of children heights + 1
        if x.getHeight() != max(x.getLeft().getHeight(), x.getRight().getHeight()) + 1:
            return False
        # Recursive calls
        return self.isSizeConsistentRec(x.getLeft()) and self.isSizeConsistentRec(x.getRight())

    """Checks if the ranks of the nodes in the tree are consistent

    @returns: True if the ranks of the nodes in the tree are consistent
    """

    def isRankConsistent(self):
        return True

    """Returns a list of the nodes in the tree sorted by index in O(n)

    @rtype: list
    @returns: A list of the nodes in the tree sorted by index
    """

    def nodes(self):
        lst = []
        self.nodesInOrder(self.getRoot(), lst)
        return lst

    """Adds the nodes in the subtree to the list
     following an in-order traversal in O(n)

    @type x: AVLNode
    @type lst: list
    @param x: The root of the subtree
    @param lst: The list
    """

    def nodesInOrder(self, x, lst):
        if not x.isRealNode():
            return
        self.nodesInOrder(x.getLeft(), lst)
        lst.append(x)
        self.nodesInOrder(x.getRight(), lst)


b = AVLTreeList()
b.getRoot()
print(b.insert(0, 15))
b.check()
b.insert(0, 8)
b.check()
b.insert(2, 22)
b.check()
b.insert(0, 4)
b.check()
b.insert(2, 11)
b.check()
b.insert(4, 20)
b.check()
b.insert(6, 24)
b.check()
print(b.insert(0, 2))
b.check()
print(b.insert(3, 9))
b.check()
print(b.insert(5, 12))
b.check()
print(b.insert(7, 18))
b.check()
print(b.insert(6, 13))
b.check()
#print(b.delete(11))
b.check()
#print(b.delete(9))
b.check()
#print(b.delete(4))
b.check()
#print(b.delete(0))
b.check()
#print(b.delete(3))
b.check()
#print(b.delete(2))
b.check()
#print(b.delete(0))
b.check()
AVLTreeList.print2d(b.getRoot())
print(b.listToArray())
a = AVLTreeList()
a.insert(0, 200)
a.insert(0, 100)
a.insert(2, 300)

#a.insert(0, 64)
#a.insert(0, 63)
#a.insert(0, 62)
#a.insert(0, 61)
#a.check()
#AVLTreeList.print2d(a.getRoot())
#print(a.listToArray())
#b.concat(a)
#b.check()
#AVLTreeList.print2d(b.getRoot())
#print(b.listToArray())

"""
###############  test 2 concat  ##########33
t = AVLTreeList()
t.insert(0, 40)
t.insert(0, 20)
t.insert(2, 50)
t.insert(0, 10)
t.insert(2, 30)
a.check()
AVLTreeList.print2d(t.getRoot())
print(t.listToArray())
a.concat(t)
a.check()
AVLTreeList.print2d(a.getRoot())
print(a.listToArray())

###############  test 3 concat  ##########33
print("          test 33333333        ")
t = AVLTreeList()
t.insert(0, 40)
t.insert(0, 20)
t.insert(2, 50)
t.insert(0, 10)
t.insert(2, 30)
a.check()
AVLTreeList.print2d(t.getRoot())
print(t.listToArray())
t.concat(a)
t.check()
AVLTreeList.print2d(t.getRoot())
print(t.listToArray())


##########test 4 ###################
print("test 44444444")
t = AVLTreeList()
t.insert(0, 70)
t.insert(0, 40)
t.insert(2, 90)
t.insert(0, 20)
t.insert(2, 60)
t.insert(4, 80)
t.insert(6, 100)
t.insert(0, 10)
t.insert(2, 30)
t.insert(4, 50)
t.check()
print(t.listToArray())
AVLTreeList.print2d(t.getRoot())
print("concet" , a.concat(t))
a.check()
AVLTreeList.print2d(a.getRoot())
print(a.listToArray())
"""

##########test 5 ###################
print("test 5555555555")
t = AVLTreeList()
t.insert(0, 70)
t.insert(0, 40)
t.insert(2, 90)
t.insert(0, 20)
t.insert(2, 60)
t.insert(4, 80)
t.insert(6, 100)
t.insert(0, 10)
t.insert(2, 30)
t.insert(4, 50)
t.check()
print(t.listToArray())
AVLTreeList.print2d(t.getRoot())
print("concet" , t.concat(a))
t.check()
AVLTreeList.print2d(t.getRoot())
print(t.listToArray())